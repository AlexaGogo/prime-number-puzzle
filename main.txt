from math import sqrt
from itertools import count, islice

# One of my original is_prime attempts - very slow
# You... don't want to see my other attempts haha

# def is_prime(n):
#     # if n in seen:
#     #     return seen[n]
#     #
#     # result = n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))
#     #
#     # return result

# Learned about Miller-Rabin primality test after thinking there must be a better way
# Quickly found test in python code format claiming correct answers for n up to 341550071728321, which, if true, should
# work perfectly for our intended purposes
# Code taken from: https://rosettacode.org/wiki/Miller%E2%80%93Rabin_primality_test#Python:_Proved_correct_up_to_large_N

# Note: Since we know n will always be 10-digits in this scenario, I have blocked out irrelevant tests

def _try_composite(a, d, n, s):
    if pow(a, d, n) == 1:
        return False
    for i in range(s):
        if pow(a, 2 ** i * d, n) == n - 1:
            return False
    return True  # n  is definitely composite


def is_prime(n, _precision_for_huge_n=16):
    if n in _known_primes:
        return True
    if any((n % p) == 0 for p in _known_primes) or n in (0, 1):
        return False
    d, s = n - 1, 0
    while not d % 2:
        d, s = d >> 1, s + 1
    # Returns exact according to http://primes.utm.edu/prove/prove2_3.html
    # if n < 1373653:
    #     return not any(_try_composite(a, d, n, s) for a in (2, 3))
    # if n < 25326001:
    #     return not any(_try_composite(a, d, n, s) for a in (2, 3, 5))
    if n < 118670087467:
        if n == 3215031751:
            return False
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7))
    # if n < 2152302898747:
    #     return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11))
    # if n < 3474749660383:
    #     return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13))
    # if n < 341550071728321:
    #     return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17))
    # # otherwise
    # return not any(_try_composite(a, d, n, s)
    #                for a in _known_primes[:_precision_for_huge_n])


_known_primes = [2, 3]
_known_primes += [x for x in range(5, 1000, 2) if is_prime(x)]

# End of copied code

# Quick translation function

def code_breaker(n):
    alphamap = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J', 10: 'K', 11: 'L',
                12: 'M', 13: 'N', 14: 'O', 15: 'P', 16: 'Q', 17: 'R', 18: 'S', 19: 'T', 20: 'U', 21: 'V', 22: 'W',
                23: 'X', 24: 'Y', 25: 'Z'}

    secretword = ""

    while n != 0:
        # print(n)
        key = (int(n % 100) % 26)
        # print(key)
        secretword = alphamap.get(key) + secretword
        # print(secretword)
        n = int(n / 100)
        # print(n)

    return secretword



def main():
    # Modified code from _____

    nterms = int(input("How many terms? "))

    # first two terms
    n1, n2 = 0, 1
    it = 0

    string = ""
    primecount = 0

    first, second = 0, 0

    while it < nterms:
        string += str(n2)

        if len(string) >= 11:
            # print ("string length >= 11")
            # print ("before loop: " + string)
            i = 0

            while i < (len(string) - 9):
                temp = string[i:i + 10]
                # print("i = " + str(i) + ": string is " + temp)

                if is_prime(int(temp)):
                    # print("This is a 10 digit prime!!")
                    primecount += 1

                    if primecount == 1:
                        print("1st prime: " + temp)
                    elif primecount == 44722:
                        first = int(temp)
                        print("44722th prime: " + str(temp))
                    elif primecount == 53215:
                        second = int(temp)
                        print("53215th prime: " + str(temp))
                        break
                i += 1

            string = string[(len(string) - 10):]

        if primecount == 53215:
            print("values found")
            break

        nth = n1 + n2
        # update values
        n1 = n2
        n2 = nth
        it += 1

    # print("Fib(" + str(it) + "): " + string)
    # print("10 digit prime it: " + str(primecount))
    # print(primelist)

    print(code_breaker(2584418167))
    print(code_breaker(first))
    print(code_breaker(second))

main()

